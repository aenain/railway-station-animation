- 2.times do
  %br/

%section.passenger
  %ul.params
    %li.group
      %ul
        %li{ style: 'width: 30%' }
          .param
            .before
              %span.nowrap Probability of
              %span.nowrap having a ticket

            = f.text_field :average_probability_of_having_ticket, class: 'knob', data: { min: 0, max: 100 }

        %li{ style: 'width: 70%' }
          .label
            People with tickets come
            = hidden_attribute_range_fields(f, :coming_time_span_with_ticket)
            minutes before a train.

          #coming_time_span_with_ticket.slider

          .label
            People without tickets come
            = hidden_attribute_range_fields(f, :coming_time_span_without_ticket)
            minutes before a train.

          #coming_time_span_without_ticket.slider

    %li.group
      %ul
        %li{ style: 'width: 30%' }
          .param
            .before
              %span.nowrap Probability of
              %span.nowrap complaining
            = f.text_field :average_probability_of_complaining, class: 'knob-danger', data: { min: 0, max: 100 }

        %li{ style: 'width: 70%' }
          .label
            Serving informations takes
            = hidden_attribute_range_fields(f, :serving_information_time)
            minutes.

          #serving_information_time.slider

          .label
            Selling tickets takes
            = hidden_attribute_range_fields(f, :selling_ticket_time)
            minutes.

          #selling_ticket_time.slider

    - 4.times do
      %br/

    %li.group
      %ul.params-2
        %li
          .param
            .before
              %span.nowrap Go to the waiting room
              %span.nowrap when more than
            = f.text_field :go_to_waiting_room_min_time_span, class: 'knob', data: { min: 0, max: 60 }
            .after minutes to the train.
          

        %li
          .param
            .before
              %span.nowrap Go to the platform
              %span.nowrap when less than
            = f.text_field :go_to_platform_max_time_span, class: 'knob', data: { min: 0, max: 60 }
            .after minutes to the train.

    %li.group
      %ul.params-2
        %li
          .param
            .before
              %span.nowrap Probability of
              %span.nowrap having companions
            = f.text_field :average_probability_of_having_companion, class: 'knob', data: { min: 0, max: 60 }

        %li
          .param
            .before
              %span.nowrap Maximum
              %br/
              %span.nowrap companions
            = f.text_field :max_companion_count, class: 'knob', data: { min: 0, max: 10 }

    - 4.times do
      %br/

    %li
      .param
        .before
          %span.nowrap Share of people who are not interested in the particular train.
          %br/
          %span.nowrap They come to get some informations and/or buy tickets.
        = f.text_field :average_share_of_visitors, class: 'knob-big', data: { min: 0, max: 100 }

- 4.times do
  %br/

%section.train
  %ul.params
    %li
      .label
        = hidden_attribute_range_fields(f, :arriving_passenger_count)
        people arrive to the station in a single train.

      #arriving_passenger_count.slider

    %li
      .label
        = hidden_attribute_range_fields(f, :departuring_passenger_count)
        people departure from the station in a single train.

      #departuring_passenger_count.slider

    %li.group
      %ul
        %li{ style: 'width: 30%' }
          .param
            .before
              Train's external delay is known
            = f.text_field :external_delay_info_time_span, class: 'knob', data: { min: 0, max: 60 }
            .after
              minutes before the scheduled semaphore arrival time.

        %li{ style: 'width: 70%' }
          .label
            Train needs
            = hidden_attribute_range_fields(f, :internal_arrival_time)
            minutes to ride from the semaphore to its platform.

          #internal_arrival_time.slider

          .label
            - if read_only
              .cd-dropdown
                %span= f.object.scheduling_algorithm_name || "None of the algorithms has been chosen."

            - else
              = f.select :scheduling_algorithm, Simulation::SCHEDULING_ALGORITHMS.values.map {|v| [v[:label], v[:value]] }, prompt: 'Choose a scheduling algorithm'

- 4.times do
  %br/

%section.variables
  %ul.params
    %li.group
      %ul.params-3
        %li
          .param
            .before
              Platforms
            = f.text_field :platform_count, class: 'knob', data: { min: 1, max: 20 }
        %li
          .param
            .before
              Info desks
            = f.text_field :info_desk_count, class: 'knob', data: { min: 1, max: 20 }
        %li
          .param
            .before
              Cash desks
            = f.text_field :cash_desk_count, class: 'knob', data: { min: 1, max: 20 }

    %li
      .param
        .before
          %span.nowrap Waiting room
          %span.nowrap capacity
        = f.text_field :waiting_room_capacity, class: 'knob-big', data: { min: 100, max: 10000 }

- unless read_only
  :coffeescript
    $ ->
      $('#simulation_scheduling_algorithm').dropdown(
        gutter: 0
        stack: false
      )