- content_for :head do
  = stylesheet_link_tag 'reset', 'slider', 'dropdown', 'simulation'
  = javascript_include_tag 'jquery-1.8.3', 'jquery.knob', 'jquery-ui-1.9.2.min', 'jquery.dropdown'

= form_for @simulation do |f|
  #settings
    - 2.times do
      %br/

    %section.passenger
      %ul.params
        %li.group
          %ul
            %li{ style: 'width: 30%' }
              .param
                .before
                  %span.nowrap Probability of
                  %span.nowrap having a ticket

                = f.text_field :average_probability_of_having_ticket, class: 'knob', data: { min: 0, max: 100 }

            %li{ style: 'width: 70%' }
              .label
                People with tickets come
                = hidden_attribute_range_fields(f, :coming_time_span_with_ticket)
                minutes before a train.

              #coming_time_span_with_ticket.slider

              .label
                People without tickets come
                = hidden_attribute_range_fields(f, :coming_time_span_without_ticket)
                minutes before a train.

              #coming_time_span_without_ticket.slider

        %li.group
          %ul
            %li{ style: 'width: 30%' }
              .param
                .before
                  %span.nowrap Probability of
                  %span.nowrap complaining
                = f.text_field :average_probability_of_complaining, class: 'knob-danger', data: { min: 0, max: 100 }

            %li{ style: 'width: 70%' }
              .label
                Serving informations takes
                = hidden_attribute_range_fields(f, :serving_information_time)
                minutes.

              #serving_information_time.slider

              .label
                Selling tickets takes
                = hidden_attribute_range_fields(f, :selling_ticket_time)
                minutes.

              #selling_ticket_time.slider

        - 4.times do
          %br/

        %li.group
          %ul.params-2
            %li
              .param
                .before
                  %span.nowrap Go to the waiting room
                  %span.nowrap when more than
                = f.text_field :go_to_waiting_room_min_time_span, class: 'knob', data: { min: 0, max: 60 }
                .after minutes to the train.
              

            %li
              .param
                .before
                  %span.nowrap Go to the platform
                  %span.nowrap when less than
                = f.text_field :go_to_platform_max_time_span, class: 'knob', data: { min: 0, max: 60 }
                .after minutes to the train.

        %li.group
          %ul.params-2
            %li
              .param
                .before
                  %span.nowrap Probability of
                  %span.nowrap having companions
                = f.text_field :average_probability_of_having_companion, class: 'knob', data: { min: 0, max: 60 }

            %li
              .param
                .before
                  %span.nowrap Maximum
                  %br/
                  %span.nowrap companions
                = f.text_field :max_companion_count, class: 'knob', data: { min: 0, max: 10 }

        - 4.times do
          %br/

        %li
          .param
            .before
              %span.nowrap Share of people who are not interested in the particular train.
              %br/
              %span.nowrap They come to get some informations and/or buy tickets.
            = f.text_field :average_share_of_visitors, class: 'knob-big', data: { min: 0, max: 100 }

    - 4.times do
      %br/

    %section.train
      %ul.params
        %li
          .label
            = hidden_attribute_range_fields(f, :arriving_passenger_count)
            people arrive to the station in a single train.

          #arriving_passenger_count.slider

        %li
          .label
            = hidden_attribute_range_fields(f, :departuring_passenger_count)
            people departure from the station in a single train.

          #departuring_passenger_count.slider

        %li.group
          %ul
            %li{ style: 'width: 30%' }
              .param
                .before
                  Train's external delay is known
                = f.text_field :external_delay_info_time_span, class: 'knob', data: { min: 0, max: 60 }
                .after
                  minutes before the scheduled semaphore arrival time.

            %li{ style: 'width: 70%' }
              .label
                Train needs
                = hidden_attribute_range_fields(f, :internal_arrival_time)
                minutes to ride from the semaphore to its platform.

              #internal_arrival_time.slider

              .label
                = f.select :scheduling_algorithm, Simulation::SCHEDULING_ALGORITHMS.values.map {|v| [v[:label], v[:value]] }, prompt: 'Choose a scheduling algorithm'

    - 4.times do
      %br/

    %section.variables
      %ul.params
        %li.group
          %ul.params-3
            %li
              .param
                .before
                  Platforms
                = f.text_field :platform_count, class: 'knob', data: { min: 1, max: 20 }
            %li
              .param
                .before
                  Info desks
                = f.text_field :info_desk_count, class: 'knob', data: { min: 1, max: 20 }
            %li
              .param
                .before
                  Cash desks
                = f.text_field :cash_desk_count, class: 'knob', data: { min: 1, max: 20 }

        %li
          .param
            .before
              %span.nowrap Waiting room
              %span.nowrap capacity
            = f.text_field :waiting_room_capacity, class: 'knob-big', data: { min: 100, max: 10000 }

  - 2.times do
    %br/

  .actions
    = f.submit 'Simulate', class: 'primary'

:coffeescript
  $ ->
    knobColors =
      foreground:
        normal: "rgb(31, 184, 208)"
        danger: "rgb(159, 63, 95)"
      background: "rgb(254, 250, 245)"

    $(".knob").knob(
      width: 120
      height: 120
      fgColor: knobColors.foreground.normal
      bgColor: knobColors.background
    )

    $(".knob-danger").knob(
      width: 120
      height: 120
      fgColor: knobColors.foreground.danger
      bgColor: knobColors.background
    )

    $(".knob-big").knob(
      width: 360
      height: 360
      fgColor: knobColors.foreground.normal
      bgColor: knobColors.background
    )

    extractInputNumericValues = ($inputs) ->
      values = []
      $inputs.each (_, input) ->
        values.push parseFloat(input.value)
      return values

    labeledRangeWithFields = (rangeName, rangeOptions, prefix) ->
      $range = $("#" + rangeName)
      $label = $("#" + rangeName + "_label")
      $inputs = $("#" + prefix + "min_" + rangeName + ", #" + prefix + "max_" + rangeName)
      values = extractInputNumericValues($inputs)
      $.extend(rangeOptions, {
        range: true
        values: values
        slide: (_, ui) ->
          $inputs.eq(0).val(ui.values[0])
          $inputs.eq(1).val(ui.values[1])
          $label.text(ui.values.join(" - "))
      })

      $range.slider(rangeOptions)
      $label.text(values.join(" - "))

    rangeFields = [
      {
        name: "coming_time_span_with_ticket"
        min: 1
        max: 60
      },
      {
        name: "coming_time_span_without_ticket"
        min: 1
        max: 60
      },
      {
        name: "serving_information_time"
        min: 1
        max: 60
      },
      {
        name: "selling_ticket_time"
        min: 1
        max: 60
      },
      {
        name: "arriving_passenger_count"
        min: 0
        max: 1000
      },
      {
        name: "departuring_passenger_count"
        min: 0
        max: 1000
      },
      {
        name: "internal_arrival_time"
        min: 0
        max: 60
      }
    ]

    labeledRangeWithFields(r.name, { min: r.min, max: r.max }, "simulation_") for r in rangeFields

    $('#simulation_scheduling_algorithm').dropdown(
      gutter: 0
      stack: false
    )